extends:
  - [spectral:oas, off] # needed to activate Spectral operation-2xx-response rule or to use the oasOp2xxResponse function
rules:
  # Adapted from existing Spectral OAS rule to change rule name and description (only severity can be overiddden using the following one)
  #operation-2xx-response: error
  http-status-code-mandatory-2xx:
    recommended: true
    description: Operation must have at least one 2xx response.
    message: '{{description}} ({{path}})'
    severity: error
    tags:
      - http status code
    given: "$.paths.*[?( @property === 'get' || @property === 'put' || @property === 'post' || @property === 'delete' || @property === 'options' || @property === 'head' || @property === 'patch' || @property === 'trace' )]"
    then:
      field: responses
      function: oasOp2xxResponse

  http-status-code-mandatory-401:
    recommended: true
    description: Operation must return a 401 error response
    message: '{{description}} ({{path}})'
    severity: error
    tags:
      - http status code
    given: $.paths.*.*.responses
    then:
      - field: "401"
        function: truthy

  http-status-code-mandatory-500:
    recommended: true
    description: Operation must return a 500 error response
    message: '{{description}} ({{path}})'
    severity: error
    tags:
      - http status code
    given: $.paths.*.*.responses
    then:
      - field: "500"
        function: truthy
  
  http-status-code-404-when-path-parameters:
    recommended: true
    description: On operation on a path with a path parameter must return a 404 HTTP status code
    message: "{{description}}. {{path}}"
    severity: error
    tags:
      - http status code
    given: "$.paths[?(@ =~ /{/i)].*.responses"
    then:
      - field: "404"
        function: truthy

  http-status-code-no-404-when-no-path-parameters:
    recommended: true
    description: No 404 HTTP status code should be returned on operation on a path without path parameters
    message: "{{description}}. {{path}}"
    severity: error
    tags:
      - http status code
    given: "$.paths[?(@ =~ /[^{]/i)].*.responses"
    then:
      - field: "404"
        function: falsy

  # Using separate rule for each method to stay user friendly (get, put and patch could be handled with the same rule)
  http-status-code-get:
    recommended: true
    description: Get operation can only return 200, 400, 401, 403, 404, and 500 HTTP status codes
    message: "{{description}}. {{path}}"
    severity: error
    tags:
      - http status code
    given: $.paths.*.get.responses
    then:
      field: "@key"
      function: pattern
      function: enumeration
      functionOptions:
        values:
          - '200'
          - '400'
          - '401'
          - '403'
          - '404'
          - '500'

  http-status-code-put:
    recommended: true
    description: Put operation can only return 200, 400, 401, 403, 404, and 500 HTTP status codes
    message: "{{description}}. {{path}}"
    message: "{{error}}"
    severity: error
    tags:
      - http status code
    given: $.paths.*.put.responses
    then:
      field: "@key"
      function: enumeration
      functionOptions:
        values:
          - '200'
          - '400'
          - '401'
          - '403'
          - '404'
          - '500'

  http-status-code-patch:
    recommended: true
    description: Patch operation can only return 200, 400, 401, 403, 404, and 500 HTTP status codes
    message: "{{description}}. {{path}}"
    severity: error
    tags:
      - http status code
    given: $.paths.*.patch.responses
    then:
      field: "@key"
      function: enumeration
      functionOptions:
        values:
          - '200'
          - '400'
          - '401'
          - '403'
          - '404'
          - '500'

  http-status-code-delete:
    recommended: true
    description: Delete operation can only return 200, 204, 400, 401, 403, 404, and 500 HTTP status codes
    message: 'PROPERTY: {{property}}, ERROR: {{error}}, DESCRIPTION: {{description}}'
    severity: error
    tags:
      - http status code
    given: $.paths.*.delete.responses
    then:
      field: "@key"
      function: enumeration
      functionOptions:
        values:
          - '200'
          - '204'
          - '400'
          - '401'
          - '403'
          - '404'
          - '500'

  http-status-code-post:
    recommended: true
    description: Post operation can only return 200, 201, 202, 400, 401, 403, 404, and 500 HTTP status codes
    message: 'PROPERTY: {{property}}, ERROR: {{error}}, DESCRIPTION: {{description}}'
    severity: error
    tags:
      - http status code
    # Test de filtre pour les post .../search: filtre en dure OK mais regex KO, fonction spécifique pour gérer finement les post à prévoir?
    #given: $.paths[?(@property === "/somePath/search")].post.responses
    #given: $.paths.[[?(@property =~ /\/search$/)]].post.responses
    given: $.paths.*.post.responses
    then:
      field: "@key"
      function: enumeration
      functionOptions:
        values:
          - '200'
          - '201'
          - '202'
          - '400'
          - '401'
          - '403'
          - '404'
          - '500'