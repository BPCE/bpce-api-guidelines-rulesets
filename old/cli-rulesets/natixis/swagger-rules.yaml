# ruleset for spectral version 4.x.x (tested with 4.2.0)
extends: [[spectral:oas2, off]]
rules:
  # Spectral OAS 2 rules actually used
  operation-2xx-response: true

  # Natixis rules
  basepath-defined:
    recommended: true
    description: Base path must be defined
    severity: error
    tags:
      - basepath
    given: $
    then:
      field: basePath
      function: truthy

  basepath-valid-structure:
    recommended: true
    description: Base path structure must be /apiName/version (for example /someName/v2)
    severity: error
    tags:
      - basepath
    given: $
    then:
      field: basePath
      function: pattern
      functionOptions:
        match: "^\/[a-zA-Z0-9_-]+\/(v|V)[0-9]+$"
  
  basepath-lowerCamelCased:
    recommended: true
    description: Base path in lowerCamelCase (for example /someName/v2)
    severity: error
    tags:
      - basepath
    given: $
    then:
      field: basePath
      function: pattern
      functionOptions:
        # added / use case to avoid having it trigger this rule
        match: "(^\/$)|(^(\/{?[a-z]+([A-Z0-9][a-z0-9]*)*}?)+$)"

  basepath-no-trailing-slash:
    recommended: true
    description: No trailing slash on basepath
    severity: error
    tags:
      - basepath
    given: $
    then:
      field: basePath
      function: pattern
      functionOptions:
        notMatch: "\\/$"

  path-no-trailing-slash:
    recommended: true
    description: No trailing slash on path (cause problems on API gateway)
    message: 'PROPERTY: {{property}}, ERROR: {{error}}, DESCRIPTION: {{description}}'
    severity: error
    tags:
      - path
    given: $.paths
    then:
      field: "@key"
      function: pattern
      functionOptions:
        # Always put quotes around regex (it may work without them but not on all regex)
        notMatch: "\\/$"

  path-not-include-query: 
      recommended: true
      description: Path should not include a query string
      message: 'PROPERTY: {{property}}, ERROR: {{error}}, DESCRIPTION: {{description}}'
      given: $.paths
      then:
        field: "@key"
        function: pattern
        functionOptions:
          notMatch: "\\?"

  path-lower-camel-case:
    recommended: true
    description: Path must be in lowerCamelCase
    severity: error
    tags:
      - path
    given: $.paths
    then:
      field: "@key"
      function: pattern
      functionOptions:
        match: "^(\/{?[a-z]+([A-Z0-9][a-z0-9]*)*}?)+$"

  path-contains-no-basepath:
    recommended: true
    description: Path must not contain base path (api name and version)
    severity: error
    tags:
      - path
    given: $.paths
    then:
      field: "@key"
      function: pattern
      functionOptions:
        notMatch: "^\/[a-zA-Z0-9_-]+\/(v|V)[0-9]+.*$"

  path-contains-no-versioning:
    recommended: true
    description: Resource path must not contain version (must be in base path)
    severity: error
    tags:
      - path
    given: $.paths
    then:
      field: "@key"
      function: pattern
      functionOptions:
        notMatch: "(v|V)[0-9]+"  

  path-valid-structure:
    recommended: true
    description: Resource path must conform to /resources/{id} pattern
    severity: error
    tags:
      - path
    given: $.paths
    then:
      field: "@key"
      function: pattern
      functionOptions:
        match: "^(\/[a-zA-Z0-9-_]+\/[v|V][0-9]+)?((\/[a-zA-Z0-9-_]+\/{[a-zA-Z0-9-_]+})*)(\/[a-zA-Z0-9-_]+$|\/[a-zA-Z0-9-_]+\/{[a-zA-Z0-9-_]+})$"

  path-collections-plural-names:
    recommended: true
    description: Collection must be plural names
    severity: error
    tags:
      - path
    given: $.paths
    then:
      field: "@key"
      function: pattern
      functionOptions:
        match: "^(\/[a-zA-Z0-9-_]+\/[v|V][0-9]+)?((\/[a-zA-Z0-9-_]+(s|i?es|ves)\/{[a-zA-Z0-9-_]+})*)(\/[a-zA-Z0-9-_]+(s|i?es|ves)$|\/[a-zA-Z0-9-_]+(s|i?es|ves)\/{[a-zA-Z0-9-_]+})$"

  authorized-http-methods:
    recommended: true
    description: Only post, get, put, patch and delete HTTP methods are allowed
    message: 'PROPERTY: {{property}}, ERROR: {{error}}, DESCRIPTION: {{description}}'
    severity: error
    tags:
      - http method
    given: $.paths.*
    then:
      field: "@key"
      function: pattern
      functionOptions:
        match: "^(parameters|x-.*|post|get|put|patch|delete)$"
    
  expected-http-status-all-methods-errors:
    recommended: true
    description: Operation must have at least a 401 and a 500 error responses
    message: 'PROPERTY: {{property}}, ERROR: {{error}}, DESCRIPTION: {{description}}'
    severity: error
    tags:
      - http status
    given: $.paths.*.*.responses
    then:
      - field: "401"
        function: truthy
      - field: "500"
        function: truthy

  expected-http-status-all-methods-successes:
    recommended: false
    # source: https://github.com/stoplightio/spectral/blob/master/src/rulesets/oas/ruleset.json
    description: Operation must have at least one 2xx response.
    message: 'PROPERTY: {{property}}, ERROR: {{error}}, DESCRIPTION: {{description}}'
    severity: error
    tags:
      - http status
    given: $..paths.*[?( @property === 'get' || @property === 'put' || @property === 'post' || @property === 'delete' || @property === 'options' || @property === 'head' || @property === 'patch' || @property === 'trace' )]
    then:
      field: responses
      function: truthy

  no-response-body-http-204:
    recommended: true
    description: No response body allowed on 204 status
    message: 'PROPERTY: {{property}}, ERROR: {{error}}, DESCRIPTION: {{description}}'
    severity: error
    given: $.paths.*.*.responses.204
    then:
      field: "@key"
      function: pattern
      functionOptions:
        notMatch: "^schema$"

  authorized-http-status-post:
    recommended: true
    description: Post operation can only return 200, 201, 202, 400, 401, 403, 404, and 500 HTTP status codes
    message: 'PROPERTY: {{property}}, ERROR: {{error}}, DESCRIPTION: {{description}}'
    severity: error
    tags:
      - http status
    given: $.paths.*.post.responses
    then:
      field: "@key"
      function: pattern
      functionOptions:
        match: "^(200|201|202|400|401|403|404|500)$"

  # Using separate rule for each method to stay user friendly (get, put and patch could be handled with the same rule)
  authorized-http-status-get:
    recommended: true
    description: Get operation can only return 200, 400, 401, 403, 404, and 500 HTTP status codes
    message: 'PROPERTY: {{property}}, ERROR: {{error}}, DESCRIPTION: {{description}}'
    severity: error
    tags:
      - http status
    given: $.paths.*.get.responses
    then:
      field: "@key"
      function: pattern
      functionOptions:
        match: "^(200|400|401|403|404|500)$"

  authorized-http-status-put:
    recommended: true
    description: Put operation can only return 200, 400, 401, 403, 404, and 500 HTTP status codes
    message: 'PROPERTY: {{property}}, ERROR: {{error}}, DESCRIPTION: {{description}}'
    severity: error
    tags:
      - http status
    given: $.paths.*.put.responses
    then:
      field: "@key"
      function: pattern
      functionOptions:
        match: "^(200|400|401|403|404|500)$"

  authorized-http-status-patch:
    recommended: true
    description: Patch operation can only return 200, 400, 401, 403, 404, and 500 HTTP status codes
    message: 'PROPERTY: {{property}}, ERROR: {{error}}, DESCRIPTION: {{description}}'
    severity: error
    tags:
      - http status
    given: $.paths.*.patch.responses
    then:
      field: "@key"
      function: pattern
      functionOptions:
        match: "^(200|400|401|403|404|500)$"

  authorized-http-status-delete:
    recommended: true
    description: Delete operation can only return 200, 204, 400, 401, 403, 404, and 500 HTTP status codes
    message: 'PROPERTY: {{property}}, ERROR: {{error}}, DESCRIPTION: {{description}}'
    severity: error
    tags:
      - http status
    given: $.paths.*.delete.responses
    then:
      field: "@key"
      function: pattern
      functionOptions:
        match: "^(200|204|400|401|403|404|500)$"

  response-only-object:
    recommended: true
    description: An operation can only return an object
    message: 'PROPERTY: {{property}}, ERROR: {{error}}, DESCRIPTION: {{description}}'
    severity: error
    tags:
      - response data
    given: $.paths.*.*.responses.*.schema
    then:
      function: schema
      functionOptions:
        # Pay attention! It's a JSON Schema of the expected Schema (Inception!)
        schema:
          $schema: "http://json-schema.org/draft-04/schema#"
          type: object
          properties:
            type:
              type: string
              enum:
                - object
  
  query-parameters-only-for-get-delete:
    recommended: true
    description: Query parameters can only be used on get or delete operation
    message: 'PROPERTY: {{property}}, ERROR: {{error}}, DESCRIPTION: {{description}}'
    severity: error
    tags:
      - parameter
    given: $.paths.*[?( @property === 'post' || @property === 'put' || @property === 'patch')].parameters[*]
    then:
      field: in
      function: pattern
      functionOptions:
        notMatch: "^query$" 

  body-parameters-only-for-post-put-patch:
    recommended: true
    description: Body parameters can only be used on post, put or patch operation
    message: 'PROPERTY: {{property}}, ERROR: {{error}}, DESCRIPTION: {{description}}'
    severity: error
    tags:
      - parameter
    given: $.paths.*[?( @property === 'get' || @property === 'delete')].parameters[*]
    then:
      field: in
      function: pattern
      functionOptions:
        notMatch: "^body$" 

  suspicious-empty-required-properties-list-definition:
    recommended: true
    description: "A schema (definition) without any required properties is suspicious (but it can be normal)"
    message: 'PROPERTY: {{property}}, ERROR: {{error}}, DESCRIPTION: {{description}}'
    severity: info
    tags:
      - data
    given: $.definitions.*
    then:
      - field: required
        function: truthy
      - field: required
        function: length
        functionOptions:
          min: 1

  suspicious-empty-required-properties-list-inline-parameter:
    recommended: true
    description: "A schema (inline parameter) without any required properties is suspicious (but it can be normal)"
    message: 'PROPERTY: {{property}}, ERROR: {{error}}, DESCRIPTION: {{description}}'
    severity: info
    tags:
      - data
    given: $.paths.*.*.parameters[*].schema
    then:
      - field: required
        function: truthy
      - field: required
        function: length
        functionOptions:
          min: 1

  suspicious-empty-required-properties-list-inline-response:
    recommended: true
    description: "A schema (inline response) without any required properties is suspicious (but it can be normal)"
    message: 'PROPERTY: {{property}}, ERROR: {{error}}, DESCRIPTION: {{description}}'
    severity: info
    tags:
      - data
    given: $.paths.*.*.responses[*].schema
    then:
      - field: required
        function: truthy
      - field: required
        function: length
        functionOptions:
          min: 1
  
  property-name-is-valid:
    recommended: true
    description: Property name must be in lowerCamelCase or be _links
    message: 'PROPERTY: {{property}}, ERROR: {{error}}, DESCRIPTION: {{description}}'
    given: $..properties
    severity: error
    then:
      field: "@key"
      function: pattern
      functionOptions:
          match: "^(_links|[a-z]+([A-Z0-9][a-z0-9]*)*)$"
    tags:
      - data
 
  schema-name-is-valid:
    recommended: true
    description: Definitionname must be in UpperCamelCase and not contain technical suffix or prefix
    message: 'PROPERTY: {{property}}, ERROR: {{error}}, DESCRIPTION: {{description}}'
    given: $.definitions
    severity: error
    then:
      field: "@key"
      function: pattern
      functionOptions:
        match: "^[A-Z][a-z0-9]+([A-Z][a-z0-9]*)*$"
        # Regex modifiers in ruleset files works only after spectral 3.0.5 (https://github.com/stoplightio/spectral/issues/242) 
        notMatch: /^.*dto$/i

  query-path-parameter-name-is-valid:
    recommended: true
    description: Path and query parameter name must be in lowerCamelCase
    message: 'PROPERTY: {{property}}, ERROR: {{error}}, DESCRIPTION: {{description}}'
    # works on reusable parameters ($.parameters), resource level parameters ($.paths.parameters) and operaiton level parameters ($.paths.*.parameters)
    given: $..parameters[?( @.in === 'query' | @.in === 'path' )].name
    severity: error
    then:
      function: pattern
      functionOptions:
          match: "^([a-z]+([A-Z0-9][a-z0-9])*)*$"

  # Not working when there is a reference. Work around: lint dereferenced files.
  response-error-schema-is-valid:
    recommended: true
    description: An error must conform to standard schema
    message: 'PROPERTY: {{property}}, ERROR: {{error}}, DESCRIPTION: {{description}}'
    severity: error
    tags:
      - response data
    given: $.paths.*.*.responses.*
    when:
      field: "@key"
      pattern: 4..|5..
    then:
      field: schema
      function: schema
      functionOptions:
        schema:
          # Pay attention! It's a JSON Schema of the expected Schema (Inception!)
          $schema: "http://json-schema.org/draft-04/schema#"
          type: object
          required:
            - required
            - properties
          properties:
            # Required properties
            required:
              type: array
              items:
                type: string
            # Root object properties list
            properties:
              type: object
              additionalProperties: false
              #required:
              #  - errors
              properties:
                errors:
                  type: object
                  required:
                    - type
                    - items
                  properties:
                    type:
                      type: string
                      enum:
                      - array
                    items:
                      type: object
                      required:
                        - properties
                        - required
                      properties:
                        required:
                          type: array
                          items:
                            type: string
                          minItems: 2
                        properties:
                          type: object
                          additionalProperties: false
                          properties:
                            code:
                              type: object
                              properties:
                                type:
                                  type: string
                                  enum:
                                    - string
                            message:
                              type: object
                              properties:
                                type:
                                  type: string
                                  enum:
                                    - string
                            attribute:
                              type: object
                              properties:
                                type:
                                  type: string
                                  enum:
                                    - string
                            path:
                              type: object
                              properties:
                                type:
                                  type: string
                                  enum:
                                    - string
                            additionalInformation:
                              type: object
                              # This check (additionalInformation content being described) should be in a separate rule as a warning because peopletend to use generic error object
                              #required:
                              #  - properties
                              #properties:
                              #  type:
                              #    type: string
                              #    enum:
                              #      - object
                              #  properties:
                              #    type: object

  collection-schema-is-valid-get:
    recommended: true
    description: A get collection response must conform to standard list schema
    message: 'PROPERTY: {{property}}, ERROR: {{error}}, DESCRIPTION: {{description}}'
    severity: error
    given: $.paths.*
    when:
      field: "@key"
      # regex match examples: 
      # get /users/{userId}/resources/{id}/statuses
      # get /resources/me/statuses
      # get /resources/{some}-{id}/statuses/{id}/tags
      # get /v1/resources
      pattern:  "^(?!.*search$)(\/v[0-9]+)?(\/[a-zA-Z0-9]+\/([a-zA-Z0-9]+|{[a-zA-Z0-9]+}(-{[a-zA-Z0-9]+})*))*(\/[a-zA-Z0-9]+)$"
    then:
      # field: get.responses.200.schema -> error if this path does not exist so modifying schema so checking schema from path level
      function: schema
      functionOptions:
        schema:
          type: object
          additionalProperties: true
          properties:
            get:
              type: object
              additionalProperties: true
              properties:
                responses:
                  type: object
                  required:
                    - '200'  
                  properties:
                    '200':
                      type: object
                      required:
                        - schema
                      properties:
                        schema:
                          type: object
                          required:
                            - properties
                          properties:
                            properties:
                              type: object
                              additionalProperties: false
                              required:
                                - items
                              properties:
                                items:
                                  type: object
                                  required:
                                    - type
                                    - items
                                  properties:
                                    type:
                                      type: string
                                      enum: 
                                        - array
                                    items:
                                      required:
                                        - properties
                                      properties:
                                        properties:
                                          type: object
                                additionalInformation:
                                  type: object
                                  required:
                                    - properties
                                  properties:
                                    properties:
                                      type: object
                                page:
                                  type: object
                                  properties:
                                    properties:
                                      type: object
                                      additionalProperties: false
                                      properties:
                                        pageSize:
                                          type: object
                                          properties:
                                            type:
                                              type: string
                                              enum: 
                                                - number
                                        pageNumber:
                                          type: object
                                          properties:
                                            type:
                                              type: string
                                              enum: 
                                                - number
                                        totalElements:
                                          type: object
                                          properties:
                                            type:
                                              type: string
                                              enum: 
                                                - number
                                        totalPages:
                                          type: object
                                          properties:
                                            type:
                                              type: string
                                              enum: 
                                                - number
                                        before:
                                          type: object
                                          properties:
                                            type:
                                              type: string
                                              enum: 
                                                - string
                                        after:
                                          type: object
                                          properties:
                                            type:
                                              type: string
                                              enum: 
                                                - string
  # collection-schema-is-valid-get copy (added search on regex and changed then.field value)
  collection-schema-is-valid-post-search:
    recommended: true
    description: A post search collection response must conform to standard list schema
    message: 'PROPERTY: {{property}}, ERROR: {{error}}, DESCRIPTION: {{description}}'
    severity: error
    given: $.paths.*
    when:
      field: "@key"
      # regex match examples: 
      # /users/{userId}/resources/{id}/statuses/search
      # /resources/me/statuses/search
      # /resources/{some}-{id}/statuses/{id}/tags/search
      # /v1/resources/search
      pattern:  "\/search$"
    then:
      field: post.responses.200.schema
      function: schema
      functionOptions:
        schema:
          type: object
          required:
            - properties
          properties:
            properties:
              type: object
              additionalProperties: false
              required:
                - items
              properties:
                items:
                  type: object
                  required:
                    - type
                    - items
                  properties:
                    type:
                      type: string
                      enum: 
                        - array
                    items:
                      required:
                        - properties
                      properties:
                        properties:
                          type: object
                additionalInformation:
                  type: object
                  required:
                    - properties
                  properties:
                    properties:
                      type: object
                page:
                  type: object
                  properties:
                    properties:
                      type: object
                      additionalProperties: false
                      properties:
                        pageSize:
                          type: object
                          properties:
                            type:
                              type: string
                              enum: 
                                - number
                        pageNumber:
                          type: object
                          properties:
                            type:
                              type: string
                              enum: 
                                - number
                        totalElements:
                          type: object
                          properties:
                            type:
                              type: string
                              enum: 
                                - number
                        totalPages:
                          type: object
                          properties:
                            type:
                              type: string
                              enum: 
                                - number
                        before:
                          type: object
                          properties:
                            type:
                              type: string
                              enum: 
                                - string
                        after:
                          type: object
                          properties:
                            type:
                              type: string
                              enum: 
                                - string


  # Security
  security-definitions-defined:
    recommended: true
    description: Security definitions must be defined
    severity: error
    tags:
      - security
    given: $
    then:
      field: securityDefinitions
      function: truthy
      
  security-definitions-authorized:
    recommended: true
    description: Only apiKey and oauth security definitions are allowed
    severity: error
    tags:
      - security
    given: $.securityDefinitions.*
    then:
      field: type
      function: enumeration
      functionOptions:
        values:
          - apiKey
          - oauth2

  security-definitions-oauth-scopes-defined:
    recommended: true
    description: Scopes must be defined for all Oauth2 security definitions
    severity: error
    tags:
      - security
    given: $.securityDefinitions[?(@.type==='oauth2')]
    then:
      field: scopes
      function: truthy

  security-no-api-level:
    recommended: true
    description: API level security is forbidden (must be configured at operation level)
    severity: error
    tags:
      - security
    given: $
    then:
      field: security
      function: falsy
  
  security-operation-defined:
    recommended: true
    description: Security must be defined on each operation
    severity: error
    tags:
      - security
    given: $.paths.*.*
    then:
      field: security
      function: truthy
  # Rules ideas:
  # ------------
  # no schema on 204
  # no known bad prefix or suffix on midfix in property dte for example