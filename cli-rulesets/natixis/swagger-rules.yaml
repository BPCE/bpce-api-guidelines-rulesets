rules:

  path-no-trailing-slash:
    summary: No trailing slash on path (cause problems on API gateway)
    severity: 0
    tags:
      - path
    given: $.paths
    then:
      field: "@key"
      function: pattern
      functionOptions:
        # Always put quotes around regex (it may work without them but not on all regex)
        notMatch: "\\/$"

  authorized-http-methods:
    summary: Only post, get, put, patch and delete HTTP methods are allowed
    severity: 0
    tags:
      - http method
    given: $.paths.*
    then:
      field: "@key"
      function: pattern
      functionOptions:
        match: "^(parameters|x-.*|post|get|put|patch|delete)$"
    
  expected-http-status-all-methods-errors:
    summary: Operation must have at least a 401 and a 500 error responses
    severity: 0
    tags:
      - http status
    given: $.paths.*.*.responses
    then:
      - field: "401"
        function: truthy
      - field: "500"
        function: truthy

  expected-http-status-all-methods-successes:
    # source: https://github.com/stoplightio/spectral/blob/master/src/rulesets/oas/ruleset.json
    summary: Operation must have at least one 2xx response.
    severity: 0
    tags:
      - http status
    given: $..paths.*[?( name() === 'get' || name() === 'put' || name() === 'post' || name() === 'delete' || name() === 'options' || name() === 'head' || name() === 'patch' || name() === 'trace' )]
    then:
      field: responses
      function: oasOp2xxResponse

  no-response-body-http-204:
    summary: No response body allowed on 204 status
    severity: 0
    given: $.paths.*.*.responses.204
    then:
      field: "@key"
      function: pattern
      functionOptions:
        notMatch: "^schema$"

  authorized-http-status-post:
    summary: Post operation can only return 200, 201, 202, 400, 401, 403, 404, and 500 HTTP status codes
    severity: 0
    tags:
      - http status
    given: $.paths.*.post.responses
    then:
      field: "@key"
      function: pattern
      functionOptions:
        match: "^(200|201|202|400|401|403|404|500)$"

  # Using separate rule for each method to stay user friendly (get, put and patch could be handled with the same rule)
  authorized-http-status-get:
    summary: Get operation can only return 200, 400, 401, 403, 404, and 500 HTTP status codes
    severity: 0
    tags:
      - http status
    given: $.paths.*.get.responses
    then:
      field: "@key"
      function: pattern
      functionOptions:
        match: "^(200|400|401|403|404|500)$"

  authorized-http-status-put:
    summary: Put operation can only return 200, 400, 401, 403, 404, and 500 HTTP status codes
    severity: 0
    tags:
      - http status
    given: $.paths.*.put.responses
    then:
      field: "@key"
      function: pattern
      functionOptions:
        match: "^(200|400|401|403|404|500)$"

  authorized-http-status-patch:
    summary: Patch operation can only return 200, 400, 401, 403, 404, and 500 HTTP status codes
    severity: 0
    tags:
      - http status
    given: $.paths.*.patch.responses
    then:
      field: "@key"
      function: pattern
      functionOptions:
        match: "^(200|400|401|403|404|500)$"

  authorized-http-status-delete:
    summary: Delete operation can only return 200, 204, 400, 401, 403, 404, and 500 HTTP status codes
    severity: 0
    tags:
      - http status
    given: $.paths.*.delete.responses
    then:
      field: "@key"
      function: pattern
      functionOptions:
        match: "^(200|204|400|401|403|404|500)$"

  # Not working when there is a reference. Work around: lint unreferenced files.
  response-only-object:
    summary: An operation can only return an object
    severity: 0
    tags:
      - response data
    given: $.paths.*.*.responses.*.schema
    then:
      function: schema
      functionOptions:
        # Pay attention! It's a JSON Schema of the expected Schema (Inception!)
        schema:
          $schema: "http://json-schema.org/draft-04/schema#"
          type: object
          properties:
            type:
              type: string
              enum:
                - object
  
  query-parameters-only-for-get-delete:
    summary: Query parameters can only be used on get or delete operation
    severity: 0
    tags:
      - parameter
    given: $.paths.*[?( name() === 'post' || name() === 'put' || name() === 'patch')].parameters[*]
    then:
      field: in
      function: pattern
      functionOptions:
        notMatch: "^query$" 

  body-parameters-only-for-post-put-patch:
    summary: Body parameters can only be used on post, put or patch operation
    severity: 0
    tags:
      - parameter
    given: $.paths.*[?( name() === 'get' || name() === 'delete')].parameters[*]
    then:
      field: in
      function: pattern
      functionOptions:
        notMatch: "^body$" 

  suspicious-empty-required-properties-list-definition:
    summary: "A schema (definition) without any required properties is suspicious (but it can be normal)"
    severity: 1
    tags:
      - data
    given: $.definitions.*
    then:
      - field: required
        function: truthy
      - field: required
        function: length
        functionOptions:
          min: 1

  suspicious-empty-required-properties-list-inline-parameter:
    summary: "A schema (inline parameter) without any required properties is suspicious (but it can be normal)"
    severity: 1
    tags:
      - data
    given: $.paths.*.*.parameters[*].schema
    then:
      - field: required
        function: truthy
      - field: required
        function: length
        functionOptions:
          min: 1

  suspicious-empty-required-properties-list-inline-response:
    summary: "A schema (inline response) without any required properties is suspicious (but it can be normal)"
    severity: 1
    tags:
      - data
    given: $.paths.*.*.responses[*].schema
    then:
      - field: required
        function: truthy
      - field: required
        function: length
        functionOptions:
          min: 1
  
  property-name-is-valid:
    summary: Property name must be in lowerCamelCase or be _links
    given: $..properties
    severity: 0
    then:
      field: "@key"
      function: pattern
      functionOptions:
          match: "^(_links|[a-z]+([A-Z0-9][a-z0-9]*)*)$"
    tags:
      - data

  schema-name-is-valid:
    summary: Definitionname must be in UpperCamelCase and not contain technical suffix or prefix
    given: $.definitions
    severity: 0
    then:
      field: "@key"
      function: pattern
      functionOptions:
        match: "^[A-Z][a-z0-9]+([A-Z][a-z0-9]*)*$"
        # Can't provide a /something/i regex, created an issue
        # https://github.com/stoplightio/spectral/issues/242
        # notMatch: /^.*dto$/i
        # Ugly workaround
        notMatch: ^.*(dto|Dto|dTo|dtO|DTo|dTO|DTO)$
 
  query-path-parameter-name-is-valid:
    summary: Path and query parameter name must be in lowerCamelCase
    # works on reusable parameters ($.parameters), resource level parameters ($.paths.parameters) and operaiton level parameters ($.paths.*.parameters)
    given: $..parameters[?( @.in === 'query' | @.in === 'path' )].name
    severity: 0
    then:
      function: pattern
      functionOptions:
          match: "^([a-z]+([A-Z0-9][a-z0-9])*)*$"

  # Not working when there is a reference. Work around: lint dereferenced files.
  response-error-schema-is-valid:
    summary: An error must conform to standard schema
    severity: 0
    tags:
      - response data
    given: $.paths.*.*.responses.*
    when:
      field: "@key"
      pattern: 4..|5..
    then:
      field: schema
      function: schema
      functionOptions:
        schema:
          # Pay attention! It's a JSON Schema of the expected Schema (Inception!)
          $schema: "http://json-schema.org/draft-04/schema#"
          type: object
          required:
            - required
            - properties
          properties:
            # Required properties
            required:
              type: array
              items:
                type: string
            # Root object properties list
            properties:
              type: object
              additionalProperties: false
              required:
                - errors
              properties:
                errors:
                  type: object
                  required:
                    - type
                    - items
                  properties:
                    type:
                      type: string
                      enum:
                      - array
                    items:
                      type: object
                      required:
                        - properties
                        - required
                      properties:
                        required:
                          type: array
                          items:
                            type: string
                          minItems: 2
                        properties:
                          type: object
                          additionalProperties: false
                          properties:
                            code:
                              type: object
                              properties:
                                type:
                                  type: string
                                  enum:
                                    - string
                            message:
                              type: object
                              properties:
                                type:
                                  type: string
                                  enum:
                                    - string
                            attribute:
                              type: object
                              properties:
                                type:
                                  type: string
                                  enum:
                                    - string
                            path:
                              type: object
                              properties:
                                type:
                                  type: string
                                  enum:
                                    - string
                            additionalInformation:
                              type: object
                              # This check (additionalInformation content being described) should be in a separate rule as a warning because peopletend to use generic error object
                              required:
                                - properties
                              properties:
                                type:
                                  type: string
                                  enum:
                                    - object
                                properties:
                                  type: object

  collection-schema-is-valid-get:
    summary: A get collection response must conform to standard list schema
    severity: 0
    given: $.paths.*
    when:
      field: "@key"
      # regex match examples: 
      # get /users/{userId}/resources/{id}/statuses
      # get /resources/me/statuses
      # get /resources/{some}-{id}/statuses/{id}/tags
      # get /v1/resources
      pattern:  "^(?!.*search$)(\/v[0-9]+)?(\/[a-zA-Z0-9]+\/([a-zA-Z0-9]+|{[a-zA-Z0-9]+}(-{[a-zA-Z0-9]+})*))*(\/[a-zA-Z0-9]+)$"
    then:
      field: get.responses.200.schema
      function: schema
      functionOptions:
        schema:
          type: object
          required:
            - properties
          properties:
            properties:
              type: object
              additionalProperties: false
              required:
                - items
              properties:
                items:
                  type: object
                  required:
                    - type
                    - items
                  properties:
                    type:
                      type: string
                      enum: 
                        - array
                    items:
                      required:
                        - properties
                      properties:
                        properties:
                          type: object
                additionalInformation:
                  type: object
                  required:
                    - properties
                  properties:
                    properties:
                      type: object
                page:
                  type: object
                  properties:
                    properties:
                      type: object
                      additionalProperties: false
                      properties:
                        pageSize:
                          type: object
                          properties:
                            type:
                              type: string
                              enum: 
                                - number
                        pageNumber:
                          type: object
                          properties:
                            type:
                              type: string
                              enum: 
                                - number
                        totalElements:
                          type: object
                          properties:
                            type:
                              type: string
                              enum: 
                                - number
                        totalPages:
                          type: object
                          properties:
                            type:
                              type: string
                              enum: 
                                - number
                        before:
                          type: object
                          properties:
                            type:
                              type: string
                              enum: 
                                - string
                        after:
                          type: object
                          properties:
                            type:
                              type: string
                              enum: 
                                - string
  # collection-schema-is-valid-get copy (added search on regex and changed then.field value)
  collection-schema-is-valid-post-search:
    summary: A post search collection response must conform to standard list schema
    severity: 0
    given: $.paths.*
    when:
      field: "@key"
      # regex match examples: 
      # /users/{userId}/resources/{id}/statuses/search
      # /resources/me/statuses/search
      # /resources/{some}-{id}/statuses/{id}/tags/search
      # /v1/resources/search
      pattern:  "\/search$"
    then:
      field: post.responses.200.schema
      function: schema
      functionOptions:
        schema:
          type: object
          required:
            - properties
          properties:
            properties:
              type: object
              additionalProperties: false
              required:
                - items
              properties:
                items:
                  type: object
                  required:
                    - type
                    - items
                  properties:
                    type:
                      type: string
                      enum: 
                        - array
                    items:
                      required:
                        - properties
                      properties:
                        properties:
                          type: object
                additionalInformation:
                  type: object
                  required:
                    - properties
                  properties:
                    properties:
                      type: object
                page:
                  type: object
                  properties:
                    properties:
                      type: object
                      additionalProperties: false
                      properties:
                        pageSize:
                          type: object
                          properties:
                            type:
                              type: string
                              enum: 
                                - number
                        pageNumber:
                          type: object
                          properties:
                            type:
                              type: string
                              enum: 
                                - number
                        totalElements:
                          type: object
                          properties:
                            type:
                              type: string
                              enum: 
                                - number
                        totalPages:
                          type: object
                          properties:
                            type:
                              type: string
                              enum: 
                                - number
                        before:
                          type: object
                          properties:
                            type:
                              type: string
                              enum: 
                                - string
                        after:
                          type: object
                          properties:
                            type:
                              type: string
                              enum: 
                                - string


  # Rules ideas:
  # ------------
  # no schema on 204
  # no known bad prefix or suffix on midfix in property dte for example